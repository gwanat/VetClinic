// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetClinic.Models;

#nullable disable

namespace VetClinic.Migrations
{
    [DbContext(typeof(VetClinicContext))]
    partial class VetClinicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VetClinic.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            DoctorId = 1,
                            EndTime = new DateTime(2024, 6, 29, 10, 0, 0, 0, DateTimeKind.Local),
                            PatientId = 1,
                            RoomId = 1,
                            StartTime = new DateTime(2024, 6, 29, 9, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 2,
                            DoctorId = 2,
                            EndTime = new DateTime(2024, 6, 30, 15, 0, 0, 0, DateTimeKind.Local),
                            PatientId = 2,
                            RoomId = 2,
                            StartTime = new DateTime(2024, 6, 30, 14, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 3,
                            DoctorId = 3,
                            EndTime = new DateTime(2024, 7, 1, 12, 0, 0, 0, DateTimeKind.Local),
                            PatientId = 3,
                            RoomId = 3,
                            StartTime = new DateTime(2024, 7, 1, 11, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            AppointmentId = 4,
                            DoctorId = 4,
                            EndTime = new DateTime(2024, 7, 2, 14, 0, 0, 0, DateTimeKind.Local),
                            PatientId = 4,
                            RoomId = 4,
                            StartTime = new DateTime(2024, 7, 2, 13, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("VetClinic.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            Name = "Dr. Gregory House",
                            Specialty = "Diagnostic Medicine"
                        },
                        new
                        {
                            DoctorId = 2,
                            Name = "Dr. Meredith Grey",
                            Specialty = "General Surgery"
                        },
                        new
                        {
                            DoctorId = 3,
                            Name = "Dr. John Watson",
                            Specialty = "General Practice"
                        },
                        new
                        {
                            DoctorId = 4,
                            Name = "Dr. Stephen Strange",
                            Specialty = "Neurosurgery"
                        },
                        new
                        {
                            DoctorId = 5,
                            Name = "Dr. Miranda Bailey",
                            Specialty = "General Surgery"
                        });
                });

            modelBuilder.Entity("VetClinic.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("OwnerInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            Age = 3,
                            Breed = "Labrador",
                            Diagnosis = "Healthy, routine check-up",
                            DoctorId = 5,
                            OwnerInfo = "John Doe",
                            PatientName = "Bella",
                            Type = "Dog"
                        },
                        new
                        {
                            PatientId = 2,
                            Age = 5,
                            Breed = "German Shepherd",
                            Diagnosis = "Skin allergy, medication prescribed",
                            DoctorId = 1,
                            OwnerInfo = "Jane Smith",
                            PatientName = "Max",
                            Type = "Dog"
                        },
                        new
                        {
                            PatientId = 3,
                            Age = 2,
                            Breed = "Poodle",
                            Diagnosis = "Fractured leg, recovering well",
                            DoctorId = 4,
                            OwnerInfo = "Emily Johnson",
                            PatientName = "Lucy",
                            Type = "Dog"
                        },
                        new
                        {
                            PatientId = 4,
                            Age = 4,
                            Breed = "Bulldog",
                            Diagnosis = "Obesity, diet plan recommended",
                            DoctorId = 2,
                            OwnerInfo = "Michael Brown",
                            PatientName = "Charlie",
                            Type = "Dog"
                        },
                        new
                        {
                            PatientId = 5,
                            Age = 1,
                            Breed = "Syrian Hamster",
                            Diagnosis = "Respiratory infection, antibiotics prescribed",
                            DoctorId = 3,
                            OwnerInfo = "Alice White",
                            PatientName = "Nibbles",
                            Type = "Hamster"
                        },
                        new
                        {
                            PatientId = 6,
                            Age = 2,
                            Breed = "Canary",
                            Diagnosis = "Feather plucking, behavioral management",
                            DoctorId = 4,
                            OwnerInfo = "Bob Green",
                            PatientName = "Tweety",
                            Type = "Bird"
                        },
                        new
                        {
                            PatientId = 7,
                            Age = 3,
                            Breed = "Sports Car",
                            Diagnosis = "Engine overhaul required",
                            DoctorId = 1,
                            OwnerInfo = "Chris Blue",
                            PatientName = "Speedster",
                            Type = "Other"
                        },
                        new
                        {
                            PatientId = 8,
                            Age = 6,
                            Breed = "Thoroughbred",
                            Diagnosis = "Hoof injury, bandage and rest advised",
                            DoctorId = 5,
                            OwnerInfo = "Diana Black",
                            PatientName = "Thunder",
                            Type = "Horse"
                        },
                        new
                        {
                            PatientId = 9,
                            Age = 2,
                            Breed = "Dwarf Hamster",
                            Diagnosis = "Eye infection, eye drops prescribed",
                            DoctorId = 3,
                            OwnerInfo = "Eve Brown",
                            PatientName = "Whiskers",
                            Type = "Hamster"
                        },
                        new
                        {
                            PatientId = 10,
                            Age = 4,
                            Breed = "Parrot",
                            Diagnosis = "Beak overgrowth, trim performed",
                            DoctorId = 4,
                            OwnerInfo = "Frank Yellow",
                            PatientName = "Polly",
                            Type = "Bird"
                        },
                        new
                        {
                            PatientId = 11,
                            Age = 10,
                            Breed = "Volkswagen Beetle",
                            Diagnosis = "Transmission issue, parts replacement needed",
                            DoctorId = 1,
                            OwnerInfo = "George Purple",
                            PatientName = "Herbie",
                            Type = "Other"
                        },
                        new
                        {
                            PatientId = 12,
                            Age = 8,
                            Breed = "Arabian Horse",
                            Diagnosis = "Colic episode, monitored closely",
                            DoctorId = 5,
                            OwnerInfo = "Helen Silver",
                            PatientName = "Majesty",
                            Type = "Horse"
                        },
                        new
                        {
                            PatientId = 13,
                            Age = 1,
                            Breed = "Roborovski Hamster",
                            Diagnosis = "Dehydration, rehydration therapy",
                            DoctorId = 3,
                            OwnerInfo = "Ian Gold",
                            PatientName = "Squeaky",
                            Type = "Hamster"
                        },
                        new
                        {
                            PatientId = 14,
                            Age = 3,
                            Breed = "Cockatiel",
                            Diagnosis = "Wing injury, splint applied",
                            DoctorId = 4,
                            OwnerInfo = "Jack White",
                            PatientName = "Sky",
                            Type = "Bird"
                        });
                });

            modelBuilder.Entity("VetClinic.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            Description = "First floor examination room",
                            IsOccupied = false,
                            RoomNumber = "A101",
                            Type = "Examination Room"
                        },
                        new
                        {
                            RoomId = 2,
                            Description = "Second floor operating theater",
                            IsOccupied = true,
                            RoomNumber = "B205",
                            Type = "Operating Theater"
                        },
                        new
                        {
                            RoomId = 3,
                            Description = "Third floor examination room",
                            IsOccupied = false,
                            RoomNumber = "C302",
                            Type = "Examination Room"
                        },
                        new
                        {
                            RoomId = 4,
                            Description = "Fourth floor hospitalization room",
                            IsOccupied = true,
                            RoomNumber = "D104",
                            Type = "Hospitalization Room"
                        },
                        new
                        {
                            RoomId = 5,
                            Description = "Second floor examination room",
                            IsOccupied = false,
                            RoomNumber = "E201",
                            Type = "Examination Room"
                        });
                });

            modelBuilder.Entity("VetClinic.Models.Appointment", b =>
                {
                    b.HasOne("VetClinic.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetClinic.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VetClinic.Models.Room", "Room")
                        .WithMany("Appointments")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("VetClinic.Models.Patient", b =>
                {
                    b.HasOne("VetClinic.Models.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VetClinic.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("VetClinic.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("VetClinic.Models.Room", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
